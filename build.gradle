plugins {
	id 'java'
	id 'java-library'
	id 'application'
	id 'maven-publish'
	id 'signing'
	id 'idea'
	id 'jacoco'
	id 'org.springframework.boot' version '3.2.0'
}

//apply "com.gorylenko.gradle-git-properties"
apply from: "$rootDir/version-commit.gradle"
apply plugin: 'io.spring.dependency-management'
version project_version
group project_group

sourceCompatibility = project_jdk
targetCompatibility = project_jdk
jar.enabled = true
mainClassName = 'io.github.rothschil.RothschilApplication'
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}
repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	implementation('org.springframework.boot:spring-boot-starter')
	implementation("org.springframework.boot:spring-boot-starter-web"){
		exclude(group:'org.springframework.boot', module:'spring-boot-starter-tomcat')
	}


	implementation 'org.springframework.boot:spring-boot-starter-undertow'
	implementation 'org.springframework.boot:spring-boot-starter-aop'
	implementation "org.springframework.security:spring-security-core"

	implementation "jakarta.servlet:jakarta.servlet-api"
	implementation "jakarta.annotation:jakarta.annotation-api"

	implementation "org.projectlombok:lombok:$lombokVersion"
	testAnnotationProcessor("org.projectlombok:lombok:$lombokVersion")
	annotationProcessor 'org.projectlombok:lombok'

	implementation "org.springframework.boot:spring-boot-starter-validation"
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	// Common工具类
	implementation 'org.apache.commons:commons-lang3:3.4'
	implementation 'org.apache.directory.studio:org.apache.commons.io:2.4'
	implementation group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
	implementation group: 'commons-collections', name: 'commons-collections', version: '3.2.2'
	implementation(group: 'commons-net', name: 'commons-net', version: '3.9.0')
//	implementation group: 'io.netty', name: 'netty-all', version: '4.19'
	implementation group: 'com.google.guava', name: 'guava', version: '20.0'
	implementation 'com.github.ulisesbocchio:jasypt-spring-boot-starter:2.1.1'
	implementation 'cn.hutool:hutool-all:5.8.8'
	// alibaba 线程池
	implementation 'com.alibaba:transmittable-thread-local:2.14.2'

	implementation 'com.github.pagehelper:pagehelper-spring-boot-starter:2.0.0'
	// 持久化
//	implementation "mysql:mysql-connector-java:8.0.29"
//	implementation('com.baomidou:mybatis-plus-boot-starter:3.5.2'){
//		exclude(group:'mysql', module:'mysql-connector-java')
//	}

	// BEGIIN DB
	implementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter:3.0.3'
//	implementation 'org.xerial:sqlite-jdbc'
//	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	testImplementation 'org.mybatis.spring.boot:mybatis-spring-boot-starter-test:3.0.3'
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.5.4'
//	implementation("org.redisson:redisson-spring-boot-starter:3.25.0")
	// END DB

	implementation group: 'p6spy', name: 'p6spy', version: '3.9.1'
	implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
	//JSON
	implementation group: 'com.alibaba', name: 'fastjson', version: '1.2.83'
	implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.9'

	implementation("com.github.ben-manes.caffeine:caffeine")
	//日志转换
	implementation group: 'uk.org.lidalia', name: 'sysout-over-slf4j', version: '1.0.2'

	//sftp jsch
	implementation group: 'com.jcraft', name: 'jsch', version: '0.1.55'
	implementation(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.13'){
		exclude(group:'*', module:'commons-logging')
	}
//	testImplementation "org.springframework.boot:spring-boot-starter-test"
	testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-api:$junitVersion")
	testImplementation("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
	testImplementation("org.junit.jupiter:junit-jupiter-params:$junitVersion")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-params:$junitVersion")
	testImplementation("org.junit.platform:junit-platform-runner:1.5.1")
	testRuntimeOnly("org.junit.platform:junit-platform-runner:1.5.1")

	implementation 'javax.xml.soap:javax.xml.soap-api:1.4.0'

	implementation 'com.lmax:disruptor:3.4.4'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	implementation('org.springframework.cloud:spring-cloud-starter-bootstrap:4.1.0')
	implementation('org.springframework.cloud:spring-cloud-starter-consul-discovery:4.1.0')
/*
	implementation('org.springframework.cloud:spring-cloud-starter-consul-config:4.1.0')
*/
	implementation('org.springframework.boot:spring-boot-starter-actuator')
}

test {
	useJUnitPlatform()
}

jar {
	// 禁用档案后缀，处理 **-plain.jar
	archiveClassifier = ''
	/* 配置文件不打入jar包 */
	excludes = ["*.yml", "*.sh"]
}

// 所有操作准备好触发该任务
gradle.taskGraph.whenReady {
	tasks.each {
		if (it.getName().contains('test')) {
			it.enabled(false)
		}
	}
}

import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens

applicationDistribution.with {
	from("src/main/resources") {
		into "config"
		include "bootstrap.yml", "application.yml", "application-dev.yml", "application-prod.yml"
	}
	from("src/main/resources") {
		into "/"+project.name+"-"+project_version
		include "startup.sh", "stop.sh"
		/* 更换脚本中的变量 */
		filter(ReplaceTokens, tokens: [mainClassName: mainClassName])
		/* 更改脚本文件格式为unix */
		filter(FixCrLfFilter.class, eol: FixCrLfFilter.CrLf.newInstance("lf"))
	}
}
